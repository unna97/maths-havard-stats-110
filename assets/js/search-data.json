{
  
    
        "post0": {
            "title": "The Birthday Problem Simulation",
            "content": "#collapse-hide import random import matplotlib.pyplot as plt import networkx as nx . . Let the probablity that two people in the group with n_party share a birthday be p. . Then, probablity that they won&#39;t share a birthday is $q = 1 - p$ . Selecting r objects out of n objects = $C(n,r) = (n)!/((n - r)!*(r)!)$ . :space_invader: . Now, . number of people in party, $r = 2$, . days in year, $n = 356$ . then: . $C(356, 2) =365!/((365 - 2)! * (2)!)$ . #collapse-hide def factorial(n): ans = 1 for i in range(1, n + 1): ans *= i return ans def p_birthday(n, r): q = (factorial(n) /(factorial(n - r) * factorial(r))) print(factorial(r)) print(q) return (1 - q) p_birthday(365,23) . . 25852016738884976640000 1.6323995040052926e+36 . -1.6323995040052926e+36 . #collapse-hide n_party = 25 n_choices = 365 n_simulations = 20 a = [[random.choice(range(n_choices)) for i in range(n_party)] for j in range(n_simulations)] . . #collapse-hide x = [len(set(i)) == n_party for i in a] plt.scatter(range(n_simulations),x) . . &lt;matplotlib.collections.PathCollection at 0x7f42c6377128&gt; . #collapse-hide plt.plot(range(len(x)),x) . . [&lt;matplotlib.lines.Line2D at 0x7f42c62798d0&gt;] . #collapse-hide bar_chart = [sum(x[:i+1])/(i+1) for i in range(len(x))] plt.bar(range(n_simulations),bar_chart) . . &lt;BarContainer object of 20 artists&gt; . Below a graph is made and randomly labeled with the birthdays from one of the list set. . #collapse-hide G = nx.Graph() for i in range(n_party): for j in range(i + 1,n_party): G.add_edge(i,j) nx.draw(G, with_labels=True,node_color = a[2]) plt.show() . . #collapse-hide nx.draw_circular(G,with_labels=True,node_color = a[2]) . . #collapse-hide A = nx.Graph() A.add_node(0) nx.draw_circular(A,with_labels = True) . .",
            "url": "https://unna97.github.io/maths-havard-stats-110/jupyter/2020/06/04/_05_10_BirthdayProblem.html",
            "relUrl": "/jupyter/2020/06/04/_05_10_BirthdayProblem.html",
            "date": " • Jun 4, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "The Birthday Problem Simulation",
            "content": "#collapse-hide import random import matplotlib.pyplot as plt import networkx as nx . . Let the probablity that two people in the group with n_party share a birthday be p. . Then, probablity that they won&#39;t share a birthday is $q = 1 - p$ . Selecting r objects out of n objects = $C(n,r) = (n)!/((n - r)!*(r)!)$ . :space_invader: . Now, . number of people in party, $r = 2$, . days in year, $n = 356$ . then: . $C(356, 2) =365!/((365 - 2)! * (2)!)$ . #collapse-hide def factorial(n): ans = 1 for i in range(1, n + 1): ans *= i return ans def p_birthday(n, r): q = (factorial(n) /(factorial(n - r) * factorial(r))) print(factorial(r)) print(q) return (1 - q) p_birthday(365,23) . . 25852016738884976640000 1.6323995040052926e+36 . -1.6323995040052926e+36 . #collapse-hide n_party = 25 n_choices = 365 n_simulations = 20 a = [[random.choice(range(n_choices)) for i in range(n_party)] for j in range(n_simulations)] . . #collapse-hide x = [len(set(i)) == n_party for i in a] plt.scatter(range(n_simulations),x) . . &lt;matplotlib.collections.PathCollection at 0x7f5f507fbb38&gt; . #collapse-hide plt.plot(range(len(x)),x) . . [&lt;matplotlib.lines.Line2D at 0x7f5f4dad3da0&gt;] . #collapse-hide bar_chart = [sum(x[:i+1])/(i+1) for i in range(len(x))] plt.bar(range(n_simulations),bar_chart) . . &lt;BarContainer object of 20 artists&gt; . Below a graph is made and randomly labeled with the birthdays from one of the list set. . #collapse-hide G = nx.Graph() for i in range(n_party): for j in range(i + 1,n_party): G.add_edge(i,j) nx.draw(G, with_labels=True,node_color = a[2]) plt.show() . . #collapse-hide nx.draw_circular(G,with_labels=True,node_color = a[2]) . .",
            "url": "https://unna97.github.io/maths-havard-stats-110/jupyter/2020/05/10/BirthdayProblem.html",
            "relUrl": "/jupyter/2020/05/10/BirthdayProblem.html",
            "date": " • May 10, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "When is your birthday?",
            "content": "What is the Birthday Problem aka Birthday Paradox? . First of all,it is not really a parado Suppose you are attending a party. How big do you think the party has to be in order to be that there are two people in the party with the same birthday? Assume, every birthday is equally likely . x = int(input(&quot;Put your guess in here:&quot;)) if x &lt; 23: print(&quot;Too low..wow your intution is wrong on the opposite way than most people XD&quot;) elif x &gt; 23: print(&quot;That&#39;s too high,read on to find out why&quot;) else: print(&quot;Perfect,You have seen this problem before haven&#39;t you?&quot;) . Put your guess in here:212 That&#39;s too high,read on to find out why . Calculation of Probablity: . Let &#39;n&#39; be the number of people at party. . Let&#39;s assume that everyone in the party has a different birthday. . What is the probablity &#39;q&#39; of that happening? . if n = 2: . number of choices for first birthday,b1 = 365 number of choices for second birthday,b2 = (365 - 1) = 364 (Anything other than first birthday) probablity of choosing the particular day as first birthday = 1/365 probablity of choosing the particular day as second birthday = 1/365 reason: probablity of choosing any number from 365 choices = 1/365 q(n = 2) = (365 x (1/365)) x ((364) x (1/365)) = 364/365 . if n = 3: . similarly, b1 = 365 b2 = 365 - 1 = 364 b3 = 365 - 2 = 363 (anything other than 2 already choosen) q(n = 3) = (365 x (1/365)) x ((364) x (1/365)) x (363 x (1/365)) = (364 x 363)/(365 x 365) . hence: . q(n) = (364 x 363 x 362 x .... (365 - (n - 1))) / (365)^(n - 1) = (365!)/ ((365^n) x ((n - 1)!)) . The above calculates the formula for party of &#39;n&#39; people all with unique birthday. . Now the only two scenarios possible are : . either there is some birthday match or there is none . By law of total probablity: p(n) + q(n) = 1 where, p(n) is the probablity there is a birthday match therefore: p(n) = 1 - q(n) . Using the above formulas,the . def q(n, choices = 365): q = 1 for i in range(1, n): x = (choices - i)/choices q *= x return (q) #at max . def p(n, choices = 365): return(1 - q(n,choices)) . Probablity of your guess (in %): . 100 * p(x) . 100.0 . Probablity at 23: . (The magic number) . 100 * p(23) . 50.729723432398565 . Why is (most of the time) our guess is too high? . As, the number of people grow linearly : n (i.e 1,2,3,4,5,6,..) the number of pairs grow quadratically : (n x (n - 1)/2) (i.e 0,1,3,6,10..) The animation below shows how the &quot;pairs&quot; increase as number of people increase . #imports import random import matplotlib.pyplot as plt import matplotlib.animation from moviepy.editor import * . #intializations birthdays_possible = 365 X = nx.Graph() X.add_node(0) birthdays = [random.choice(range(birthdays_possible))] match = list() fig, ax = plt.subplots(figsize=(6,4)) . def update(num): ax.clear() if num &gt; 0: birthdays.append(random.choice(range(birthdays_possible))) print(birthdays) for i in range(num): X.add_edge(i,num) if birthdays[i] == birthdays[num]: match.append(&#39;r&#39;) else: match.append(&#39;k&#39;) nx.draw_circular(X, ax = ax, with_labels = True, node_color = birthdays,edged_color = match) . ani = matplotlib.animation.FuncAnimation(fig, update, frames= 25, interval= 2000, repeat=True) . ani.save(&#39;birthday.mp4&#39;) . [95] [95] [95, 249] [95, 249, 7] [95, 249, 7, 361] [95, 249, 7, 361, 124] [95, 249, 7, 361, 124, 312] [95, 249, 7, 361, 124, 312, 238] [95, 249, 7, 361, 124, 312, 238, 3] [95, 249, 7, 361, 124, 312, 238, 3, 262] [95, 249, 7, 361, 124, 312, 238, 3, 262, 279] [95, 249, 7, 361, 124, 312, 238, 3, 262, 279, 301] [95, 249, 7, 361, 124, 312, 238, 3, 262, 279, 301, 48] [95, 249, 7, 361, 124, 312, 238, 3, 262, 279, 301, 48, 37] [95, 249, 7, 361, 124, 312, 238, 3, 262, 279, 301, 48, 37, 127] [95, 249, 7, 361, 124, 312, 238, 3, 262, 279, 301, 48, 37, 127, 178] [95, 249, 7, 361, 124, 312, 238, 3, 262, 279, 301, 48, 37, 127, 178, 293] [95, 249, 7, 361, 124, 312, 238, 3, 262, 279, 301, 48, 37, 127, 178, 293, 188] [95, 249, 7, 361, 124, 312, 238, 3, 262, 279, 301, 48, 37, 127, 178, 293, 188, 282] [95, 249, 7, 361, 124, 312, 238, 3, 262, 279, 301, 48, 37, 127, 178, 293, 188, 282, 282] [95, 249, 7, 361, 124, 312, 238, 3, 262, 279, 301, 48, 37, 127, 178, 293, 188, 282, 282, 222] [95, 249, 7, 361, 124, 312, 238, 3, 262, 279, 301, 48, 37, 127, 178, 293, 188, 282, 282, 222, 13] [95, 249, 7, 361, 124, 312, 238, 3, 262, 279, 301, 48, 37, 127, 178, 293, 188, 282, 282, 222, 13, 343] [95, 249, 7, 361, 124, 312, 238, 3, 262, 279, 301, 48, 37, 127, 178, 293, 188, 282, 282, 222, 13, 343, 59] [95, 249, 7, 361, 124, 312, 238, 3, 262, 279, 301, 48, 37, 127, 178, 293, 188, 282, 282, 222, 13, 343, 59, 255] [95, 249, 7, 361, 124, 312, 238, 3, 262, 279, 301, 48, 37, 127, 178, 293, 188, 282, 282, 222, 13, 343, 59, 255, 58] . def is_there_a_match(birthdays): return (len(birthdays) != len(set(birthdays))) . is_there_a_match(birthdays) . True . # clip = (VideoFileClip(&quot;birthday.mp4&quot;)) # clip.write_gif(&quot;birthday.gif&quot;) . ![](birthday.gif) .",
            "url": "https://unna97.github.io/maths-havard-stats-110/birthday%20problem/jupyter/birthday%20paradox/hashing/simulations/2020/05/05/Final_Notebook.html",
            "relUrl": "/birthday%20problem/jupyter/birthday%20paradox/hashing/simulations/2020/05/05/Final_Notebook.html",
            "date": " • May 5, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://unna97.github.io/maths-havard-stats-110/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://unna97.github.io/maths-havard-stats-110/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://unna97.github.io/maths-havard-stats-110/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://unna97.github.io/maths-havard-stats-110/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}